<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsTool>true</IsTool>
		<IncludeBuildOutput>false</IncludeBuildOutput>
		<PackageType>Template</PackageType>
		<ContentTargetFolders>content</ContentTargetFolders>
		<EnableDefaultItems>False</EnableDefaultItems>

		<!-- required for .vsconfig -->
		<NoDefaultExcludes>true</NoDefaultExcludes>

		<!-- Disable package generation for WinUI converted build -->
		<IsPackable Condition="'$(UNO_UWP_BUILD)'=='false'">false</IsPackable>
		<NoWarn>$(NoWarn);NU5128</NoWarn>
		<UnoExtensionsVersion Condition="'$(UnoExtensionsVersion)' == ''">2.3.2</UnoExtensionsVersion>
		<UnoVersion Condition="'$(UnoVersion)' == ''">4.8.15</UnoVersion>
	</PropertyGroup>

	<PropertyGroup>
		<PackageTags>dotnet-new;templates;uno-platform</PackageTags>
		<Authors>uno platform</Authors>
		<PackageProjectUrl>https://github.com/unoplatform/uno.templates</PackageProjectUrl>
		<!-- <PackageIcon>logo.png</PackageIcon> -->
		<RepositoryUrl>https://github.com/unoplatform/uno.templates</RepositoryUrl>
		<Description>Templates for creating Uno Platform apps and libraries</Description>
		<Copyright>Copyright (C) 2015-$([System.DateTime]::Now.ToString(`yyyy`)) Uno Platform inc. - all rights reserved</Copyright>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageTags>dotnet-new;templates;uno-platform;webassembly;ios;android;uwp;winui;macos;winappsdk</PackageTags>
	</PropertyGroup>

	<ItemGroup>
		<TemplateFile Include="content/**/*"
					Exclude="**/obj/**;**/bin/**" />
		<UpToDateCheckInput Include="@(TemplateFile)" />
		<MergeTemplatePackage Include="Uno.ProjectTemplates.Dotnet" Version="$(UnoVersion)">
			<FileExists>false</FileExists>
		</MergeTemplatePackage>
	</ItemGroup>

	<Target Name="PrepareTemplateFiles" BeforeTargets="ReplaceVersions" AfterTargets="DownloadTemplatePackages;ExtractPackages">
		<PropertyGroup>
			<TemplateContentFolder>$([System.IO.Path]::Combine($(IntermediateOutputPath), 'content'))</TemplateContentFolder>
		</PropertyGroup>

		<RemoveDir Directories="$(TemplateContentFolder)" />

		<Copy
			SourceFiles="@(TemplateFile)"
			DestinationFiles="$(TemplateContentFolder)/%(RecursiveDir)%(Filename)%(Extension)"
			SkipUnchangedFiles="false" />
		<Copy
			SourceFiles="content/unoapp/MyExtensionsApp.1.DataContracts/WeatherForecast.cs"
			DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp.1.Server/WeatherForecast.cs"
			SkipUnchangedFiles="false" />
		<Copy
			SourceFiles="content/unoapp/MyExtensionsApp.1.Windows/Package.appxmanifest"
			DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp.1.Skia.Gtk/Package.appxmanifest"
			SkipUnchangedFiles="false" />
		<Copy
			SourceFiles="content/unoapp/MyExtensionsApp.1.Windows/Package.appxmanifest"
			DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp.1.Skia.Linux.FrameBuffer/Package.appxmanifest"
			SkipUnchangedFiles="false" />
		<Copy
			SourceFiles="content/unoapp/MyExtensionsApp.1.Windows/Package.appxmanifest"
			DestinationFiles="$(TemplateContentFolder)/unoapp/MyExtensionsApp.1.Skia.WPF/Package.appxmanifest"
			SkipUnchangedFiles="false" />
		<ItemGroup>
			<_PackageFiles
				Include="$(TemplateContentFolder)/**/*"
				PackagePath="content" />
		</ItemGroup>
	</Target>

	<Target Name="ReplaceVersions" BeforeTargets="BeforeBuild" AfterTargets="PrepareTemplateFiles">
		<ItemGroup>
			<_AllCSProjFiles Include="$(IntermediateOutputPath)/content/**/*.csproj" />
			<_AllCSProjFiles Include="$(IntermediateOutputPath)/content/**/Directory.Packages.props" />
		</ItemGroup>
		<ReplaceFileText Filename="%(_AllCSProjFiles.Identity)"
					MatchExpression="Version=&quot;UnoExtensionsPackageVersion&quot;"
					ReplacementText="Version=&quot;$(UnoExtensionsVersion)&quot;" />
		<ReplaceFileText Filename="%(_AllCSProjFiles.Identity)"
					MatchExpression="Version=&quot;UnoWinUIPackageVersion&quot;"
					ReplacementText="Version=&quot;$(UnoVersion)&quot;" />
	</Target>

	<Target Name="DownloadTemplatePackages" BeforeTargets="BeforeBuild;PrepareTemplateFiles">
		<!-- Define download directory and make sure it exists-->
		<PropertyGroup>
			<_TemplatesFolder>$([System.IO.Path]::Combine($(IntermediateOutputPath), 'templates'))</_TemplatesFolder>
			<TemplateDownloadFolder>$([System.IO.Path]::Combine($(_TemplatesFolder), 'download'))</TemplateDownloadFolder>
		</PropertyGroup>
		<MakeDir Directories="$(TemplateDownloadFolder)" />

		<ItemGroup>
			<MergeTemplatePackage Update="@(MergeTemplatePackage)"
								Condition="Exists('$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg')">
				<FileExists>true</FileExists>
			</MergeTemplatePackage>
			<OldTemplatePackages Include="$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).*"
								Exclude="$(TemplateDownloadFolder)\%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg" />
		</ItemGroup>

		<Delete Files="@(OldTemplatePackages)"/>

		<DownloadFile
			Condition="!%(MergeTemplatePackage.FileExists)"
			DestinationFolder="$(TemplateDownloadFolder)"
			DestinationFileName="%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg"
			SourceUrl="https://pkgs.dev.azure.com/uno-platform/1dd81cbd-cb35-41de-a570-b0df3571a196/_apis/packaging/feeds/e7ce08df-613a-41a3-8449-d42784dd45ce/nuget/packages/%(MergeTemplatePackage.Identity)/versions/%(MergeTemplatePackage.Version)/content"
			SkipUnchangedFiles="true" />
		<!-- Timeout="10000" /> -->

		<!-- Create an ItemGroup containing the file names of the downloaded packages -->
		<ItemGroup>
		<_TemplatePackages Include="$(TemplateDownloadFolder)/%(MergeTemplatePackage.Identity).%(MergeTemplatePackage.Version).nupkg">
			<FileExists>%(MergeTemplatePackage.FileExists)</FileExists>
		</_TemplatePackages>
		</ItemGroup>

	</Target>

	<Target Name="ExtractPackages" 
			AfterTargets="DownloadTemplatePackages"
			BeforeTargets="BeforeBuild;PrepareTemplateFiles">
		<!-- Define and make sure the extract folder exists -->
		<PropertyGroup>
			<TemplateUnzipFolder>$([System.IO.Path]::Combine($(_TemplatesFolder), 'extract'))</TemplateUnzipFolder>
		</PropertyGroup>

		<RemoveDir Directories="$(TemplateUnzipFolder)" Condition="!%(MergeTemplatePackage.FileExists)"/>

		<PropertyGroup>
			<UnzipAll>false</UnzipAll>
			<UnzipAll Condition="!Exists('$(TemplateUnzipFolder)')">true</UnzipAll>
		</PropertyGroup>

		<MakeDir Directories="$(TemplateUnzipFolder)" />

		<!-- Unzip each of the downloade packages -->
		<Unzip SourceFiles="%(_TemplatePackages.Identity)"
			DestinationFolder="$(TemplateUnzipFolder)" 
			Condition="!%(_TemplatePackages.FileExists) or $(UnzipAll)" />

		<ItemGroup>
			<_ExternalTemplateExcludes Include="$(TemplateUnzipFolder)/content/unoapp-winui/**" />
			<TemplateFile Include="$(TemplateUnzipFolder)/content/**/*" Exclude="@(_ExternalTemplateExcludes)" />
		</ItemGroup>
	</Target>

	<!-- Using Regex Replace prevents XmlPoke from replacing Tabs with Spaces -->
	<UsingTask TaskName="ReplaceFileText"
			TaskFactory="RoslynCodeTaskFactory"
			AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<Filename ParameterType="System.String" Required="true" />
			<MatchExpression ParameterType="System.String" Required="true" />
			<ReplacementText ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.Text.RegularExpressions" />
			<Code Type="Fragment" Language="cs">
				<![CDATA[
					File.WriteAllText(
						Filename,
						Regex.Replace(File.ReadAllText(Filename), MatchExpression, ReplacementText)
						);
				]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
